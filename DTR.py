# -*- coding: utf-8 -*-
"""Untitled30.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18ms6qSWDxX41fTRqjp4ZpcpCtzE4gn7M
"""

import numpy as np
import pandas as pd

df=pd.read_csv('data.csv')
dataset=df.drop(columns=['Model'])
dataset=dataset.dropna(how='any')
X=dataset.iloc[:,:-1].values
y=dataset.iloc[:,-1].values

"""Note:due to the fact that the dataset contains a lot of string values which is very useful in terms of prediction/accuracy hemnce we encode them"""

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
X[:,0]=le.fit_transform(X[:,0])
X[:,2]=le.fit_transform(X[:,2])
X[:,5]=le.fit_transform(X[:,5])
X[:,6]=le.fit_transform(X[:,6])
X[:,8]=le.fit_transform(X[:,8])
X[:,9]=le.fit_transform(X[:,9])
X[:,10]=le.fit_transform(X[:,10])
print(X)

y=y.reshape(len(y),1)
print(y)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 1)

from sklearn.tree import DecisionTreeRegressor
regressor = DecisionTreeRegressor(random_state = 0)
regressor.fit(X_train, y_train)

y_pred=regressor.predict(X_test)

np.set_printoptions(precision=2)
print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

"""Accuracy test:"""

from sklearn.metrics import r2_score
a=r2_score(y_test, y_pred)
print(abs(a*100))

"""Note: From the above table we observe that accuracy of decision tree Regressor is good for huge datasets due to the fact that they are built for that reason"""